package network.crypta.support

/**
 * A utility object providing collections of characters for testing purposes.
 *
 * This singleton object contains several predefined character arrays and mappings
 * that are useful for unit testing character encoding, decoding, and handling logic,
 * especially for UTF-8. It was ported from an original Java version to ensure
 * that tests can reference the same consistent data sets.
 */
object UtfUtils {

    /**
     * A character array containing all characters in the Unicode Basic Multilingual Plane (BMP),
     * from `\u0000` to `\uFFFF`.
     *
     * Surrogate code points, which are invalid as standalone characters, are replaced with a
     * space character (`' '`). This includes the high surrogate range
     * (`\uD800` to `\uDBFF`) and the low surrogate range (`\uDC00` to `\uDFFF`).
     *
     * @see Char.MIN_VALUE
     * @see Char.MAX_VALUE
     * @see Char.MIN_HIGH_SURROGATE
     * @see Char.MAX_HIGH_SURROGATE
     * @see Char.MIN_LOW_SURROGATE
     * @see Char.MAX_LOW_SURROGATE
     */
    val ALL_CHARACTERS: CharArray

    init {
        val size = Char.MAX_VALUE.code - Char.MIN_VALUE.code + 1
        val temp = CharArray(size)
        var idx = 0
        for (c in Char.MIN_VALUE.code..Char.MAX_VALUE.code) {
            temp[idx++] = if (c in Char.MIN_LOW_SURROGATE.code..Char.MAX_LOW_SURROGATE.code ||
                c in Char.MIN_HIGH_SURROGATE.code..Char.MAX_HIGH_SURROGATE.code
            ) {
                ' '
            } else {
                c.toChar()
            }
        }
        ALL_CHARACTERS = temp
    }

    /**
     * A character array of printable ASCII symbols and punctuation.
     *
     * This set includes common non-alphanumeric characters found on a standard
     * US keyboard, such as `!`, `@`, `#`, `(`, `)`, `[`, `]`, etc., as well as the space character.
     * It is useful for testing scenarios that involve special symbols within the ASCII range.
     */
    val PRINTABLE_ASCII = charArrayOf(
        ' ',
        '!',
        '@',
        '#',
        '$',
        '%',
        '^',
        '&',
        '(',
        ')',
        '+',
        '=',
        '{',
        '}',
        '[',
        ']',
        ':',
        ';',
        '\\',
        '"',
        '\'',
        ',',
        '<',
        '>',
        '.',
        '?',
        '~',
        '`'
    )

    /**
     * A character array of "stress" characters intended to test the handling of multi-byte UTF-8 sequences.
     *
     * These characters are primarily from the Latin-1 Supplement and Latin Extended-A Unicode blocks.
     * They are chosen to verify that encoding and decoding algorithms correctly handle characters
     * that require more than one byte in UTF-8 representation.
     */
    val STRESSED_UTF = charArrayOf(
        '\u00c9',
        '\u00e2',
        '\u00fb',
        '\u0114',
        '\u012d',
        '\u0146',
        '\u015f',
        '\u00ca',
        '\u00e3',
        '\u00fc',
        '\u0115',
        '\u012e',
        '\u0147',
        '\u0160',
        '\u00cb',
        '\u00e4',
        '\u00fd',
        '\u0116',
        '\u012f',
        '\u0148',
        '\u0161',
        '\u00cc',
        '\u00e5',
        '\u00fe',
        '\u0117',
        '\u0130',
        '\u0149',
        '\u0162',
        '\u00cd',
        '\u00e6',
        '\u00ff',
        '\u0118',
        '\u0131',
        '\u014a',
        '\u0163',
        '\u00ce',
        '\u00e7',
        '\u0100',
        '\u0119',
        '\u0132',
        '\u014b',
        '\u0164',
        '\u00cf',
        '\u00e8',
        '\u0101',
        '\u011a',
        '\u0133',
        '\u014c',
        '\u0165',
        '\u00d0',
        '\u00e9',
        '\u0102',
        '\u011b',
        '\u0134',
        '\u014d',
        '\u0166',
        '\u00d1',
        '\u00ea',
        '\u0103',
        '\u011c',
        '\u0135',
        '\u014e',
        '\u0167',
        '\u00d2',
        '\u00eb',
        '\u0104',
        '\u011d',
        '\u0136',
        '\u014f',
        '\u0168',
        '\u00d3',
        '\u00ec',
        '\u0105',
        '\u011e',
        '\u0137',
        '\u0150',
        '\u0169',
        '\u00d4',
        '\u00ed',
        '\u0106',
        '\u011f',
        '\u0138',
        '\u0151',
        '\u016a',
        '\u00d5',
        '\u00ee',
        '\u0107',
        '\u0120',
        '\u0139',
        '\u0152',
        '\u016b',
        '\u00d6',
        '\u00ef',
        '\u0108',
        '\u0121',
        '\u013a',
        '\u0153',
        '\u016c',
        '\u00d7',
        '\u00f0',
        '\u0109',
        '\u0122',
        '\u013b',
        '\u0154',
        '\u016d',
        '\u00d8',
        '\u00f1',
        '\u010a',
        '\u0123',
        '\u013c',
        '\u0155',
        '\u016e',
        '\u00d9',
        '\u00f2',
        '\u010b',
        '\u0124',
        '\u013d',
        '\u0156',
        '\u016f',
        '\u00da',
        '\u00f3',
        '\u010c',
        '\u0125',
        '\u013e',
        '\u0157',
        '\u0170',
        '\u00db',
        '\u00f4',
        '\u010d',
        '\u0126',
        '\u013f',
        '\u0158',
        '\u0171',
        '\u00dc',
        '\u00f5',
        '\u010e',
        '\u0127',
        '\u0140',
        '\u0159',
        '\u0172',
        '\u00dd',
        '\u00f6',
        '\u010f',
        '\u0128',
        '\u0141',
        '\u015a',
        '\u0173',
        '\u00de',
        '\u00f7',
        '\u0110',
        '\u0129',
        '\u0142',
        '\u015b',
        '\u0174',
        '\u00df',
        '\u00f8',
        '\u0111',
        '\u012a',
        '\u0143',
        '\u015c',
        '\u0175',
        '\u00e0',
        '\u00f9',
        '\u0112',
        '\u012b',
        '\u0144',
        '\u015d',
        '\u0176',
        '\u00e1',
        '\u00fa',
        '\u0113',
        '\u012c',
        '\u0145',
        '\u015e',
        '\u0177'
    )

    /**
     * An array of pairs mapping common HTML character entities to their corresponding UTF characters.
     *
     * Each element in the outer array is a two-element string array:
     * - `[0]`: The UTF character as a [String].
     * - `[1]`: The corresponding named HTML entity as a [String] (e.g., `é`).
     *
     * Example: `arrayOf("\u00e9", "é")`
     *
     * Note: This array is not actively used in current tests but is retained for
     * completeness and potential future use.
     */
    val HTML_ENTITIES_UTF = arrayOf(
        arrayOf("\u00a1", "&iexcl;"),
        arrayOf("\u00a2", "&cent;"),
        arrayOf("\u00a3", "&pound;"),
        arrayOf("\u00a4", "&curren;"),
        arrayOf("\u00a5", "&yen;"),
        arrayOf("\u00a6", "&brvbar;"),
        arrayOf("\u00a7", "&sect;"),
        arrayOf("\u00a8", "&uml;"),
        arrayOf("\u00a9", "&copy;"),
        arrayOf("\u00aa", "&ordf;"),
        arrayOf("\u00ab", "&laquo;"),
        arrayOf("\u00ac", "&not;"),
        arrayOf("\u00ad", "&shy;"),
        arrayOf("\u00ae", "&reg;"),
        arrayOf("\u00af", "&macr;"),
        arrayOf("\u00b0", "&deg;"),
        arrayOf("\u00b1", "&plusmn;"),
        arrayOf("\u00b2", "&sup2;"),
        arrayOf("\u00b3", "&sup3;"),
        arrayOf("\u00b4", "&acute;"),
        arrayOf("\u00b5", "&micro;"),
        arrayOf("\u00b6", "&para;"),
        arrayOf("\u00b7", "&middot;"),
        arrayOf("\u00b8", "&cedil;"),
        arrayOf("\u00b9", "&sup1;"),
        arrayOf("\u00ba", "&ordm;"),
        arrayOf("\u00bb", "&raquo;"),
        arrayOf("\u00bc", "&frac14;"),
        arrayOf("\u00bd", "&frac12;"),
        arrayOf("\u00be", "&frac34;"),
        arrayOf("\u00bf", "&iquest;"),
        arrayOf("\u00c0", "&Agrave;"),
        arrayOf("\u00c1", "&Aacute;"),
        arrayOf("\u00c2", "&Acirc;"),
        arrayOf("\u00c3", "&Atilde;"),
        arrayOf("\u00c4", "&Auml;"),
        arrayOf("\u00c5", "&Aring;"),
        arrayOf("\u00c6", "&AElig;"),
        arrayOf("\u00c7", "&Ccedil;"),
        arrayOf("\u00c8", "&Egrave;"),
        arrayOf("\u00c9", "&Eacute;"),
        arrayOf("\u00ca", "&Ecirc;"),
        arrayOf("\u00cb", "&Euml;"),
        arrayOf("\u00cc", "&Igrave;"),
        arrayOf("\u00cd", "&Iacute;"),
        arrayOf("\u00ce", "&Icirc;"),
        arrayOf("\u00cf", "&Iuml;"),
        arrayOf("\u00d0", "&ETH;"),
        arrayOf("\u00d1", "&Ntilde;"),
        arrayOf("\u00d2", "&Ograve;"),
        arrayOf("\u00d3", "&Oacute;"),
        arrayOf("\u00d4", "&Ocirc;"),
        arrayOf("\u00d5", "&Otilde;"),
        arrayOf("\u00d6", "&Ouml;"),
        arrayOf("\u00d7", "&times;"),
        arrayOf("\u00d8", "&Oslash;"),
        arrayOf("\u00d9", "&Ugrave;"),
        arrayOf("\u00da", "&Uacute;"),
        arrayOf("\u00db", "&Ucirc;"),
        arrayOf("\u00dc", "&Uuml;"),
        arrayOf("\u00dd", "&Yacute;"),
        arrayOf("\u00de", "&THORN;"),
        arrayOf("\u00df", "&szlig;"),
        arrayOf("\u00e0", "&agrave;"),
        arrayOf("\u00e1", "&aacute;"),
        arrayOf("\u00e2", "&acirc;"),
        arrayOf("\u00e3", "&atilde;"),
        arrayOf("\u00e4", "&auml;"),
        arrayOf("\u00e5", "&aring;"),
        arrayOf("\u00e6", "&aelig;"),
        arrayOf("\u00e7", "&ccedil;"),
        arrayOf("\u00e8", "&egrave;"),
        arrayOf("\u00e9", "&eacute;"),
        arrayOf("\u00ea", "&ecirc;"),
        arrayOf("\u00eb", "&euml;"),
        arrayOf("\u00ec", "&igrave;"),
        arrayOf("\u00ed", "&iacute;"),
        arrayOf("\u00ee", "&icirc;"),
        arrayOf("\u00ef", "&iuml;"),
        arrayOf("\u00f0", "&eth;"),
        arrayOf("\u00f1", "&ntilde;"),
        arrayOf("\u00f2", "&ograve;"),
        arrayOf("\u00f3", "&oacute;"),
        arrayOf("\u00f4", "&ocirc;"),
        arrayOf("\u00f5", "&otilde;"),
        arrayOf("\u00f6", "&ouml;"),
        arrayOf("\u00f7", "&divide;"),
        arrayOf("\u00f8", "&oslash;"),
        arrayOf("\u00f9", "&ugrave;"),
        arrayOf("\u00fa", "&uacute;"),
        arrayOf("\u00fb", "&ucirc;"),
        arrayOf("\u00fc", "&uuml;"),
        arrayOf("\u00fd", "&yacute;"),
        arrayOf("\u00fe", "&thorn;"),
        arrayOf("\u00ff", "&yuml;"),
        arrayOf("\u0391", "&Alpha;"),
        arrayOf("\u0392", "&Beta;"),
        arrayOf("\u0393", "&Gamma;"),
        arrayOf("\u0394", "&Delta;"),
        arrayOf("\u0395", "&Epsilon;"),
        arrayOf("\u0396", "&Zeta;"),
        arrayOf("\u0397", "&Eta;"),
        arrayOf("\u0398", "&Theta;"),
        arrayOf("\u0399", "&Iota;"),
        arrayOf("\u039a", "&Kappa;"),
        arrayOf("\u039b", "&Lambda;"),
        arrayOf("\u039c", "&Mu;"),
        arrayOf("\u039d", "&Nu;"),
        arrayOf("\u039e", "&Xi;"),
        arrayOf("\u039f", "&Omicron;"),
        arrayOf("\u03a0", "&Pi;"),
        arrayOf("\u03a1", "&Rho;"),
        arrayOf("\u03a3", "&Sigma;"),
        arrayOf("\u03a4", "&Tau;"),
        arrayOf("\u03a5", "&Upsilon;"),
        arrayOf("\u03a6", "&Phi;"),
        arrayOf("\u03a7", "&Chi;"),
        arrayOf("\u03a8", "&Psi;"),
        arrayOf("\u03a9", "&Omega;"),
        arrayOf("\u03b1", "&alpha;"),
        arrayOf("\u03b2", "&beta;"),
        arrayOf("\u03b3", "&gamma;"),
        arrayOf("\u03b4", "&delta;"),
        arrayOf("\u03b5", "&epsilon;"),
        arrayOf("\u03b6", "&zeta;"),
        arrayOf("\u03b7", "&eta;"),
        arrayOf("\u03b8", "&theta;"),
        arrayOf("\u03b9", "&iota;"),
        arrayOf("\u03ba", "&kappa;"),
        arrayOf("\u03bb", "&lambda;"),
        arrayOf("\u03bc", "&mu;"),
        arrayOf("\u03bd", "&nu;"),
        arrayOf("\u03be", "&xi;"),
        arrayOf("\u03bf", "&omicron;"),
        arrayOf("\u03c0", "&pi;"),
        arrayOf("\u03c1", "&rho;"),
        arrayOf("\u03c2", "&sigmaf;"),
        arrayOf("\u03c3", "&sigma;"),
        arrayOf("\u03c4", "&tau;"),
        arrayOf("\u03c5", "&upsilon;"),
        arrayOf("\u03c6", "&phi;"),
        arrayOf("\u03c7", "&chi;"),
        arrayOf("\u03c8", "&psi;"),
        arrayOf("\u03c9", "&omega;"),
        arrayOf("\u03d1", "&thetasym;"),
        arrayOf("\u03d2", "&upsih;"),
        arrayOf("\u03d6", "&piv;"),
        arrayOf("\u2022", "&bull;"),
        arrayOf("\u2026", "&hellip;"),
        arrayOf("\u2032", "&prime;"),
        arrayOf("\u2033", "&Prime;"),
        arrayOf("\u203e", "&oline;"),
        arrayOf("\u2044", "&frasl;"),
        arrayOf("\u2118", "&weierp;"),
        arrayOf("\u2111", "&image;"),
        arrayOf("\u211c", "&real;"),
        arrayOf("\u2122", "&trade;"),
        arrayOf("\u2135", "&alefsym;"),
        arrayOf("\u2190", "&larr;"),
        arrayOf("\u2191", "&uarr;"),
        arrayOf("\u2192", "&rarr;"),
        arrayOf("\u2193", "&darr;"),
        arrayOf("\u2194", "&harr;"),
        arrayOf("\u21b5", "&crarr;"),
        arrayOf("\u21d0", "&lArr;"),
        arrayOf("\u21d1", "&uArr;"),
        arrayOf("\u21d2", "&rArr;"),
        arrayOf("\u21d3", "&dArr;"),
        arrayOf("\u21d4", "&hArr;"),
        arrayOf("\u2200", "&forall;"),
        arrayOf("\u2202", "&part;"),
        arrayOf("\u2203", "&exist;"),
        arrayOf("\u2205", "&empty;"),
        arrayOf("\u2207", "&nabla;"),
        arrayOf("\u2208", "&isin;"),
        arrayOf("\u2209", "&notin;"),
        arrayOf("\u220b", "&ni;"),
        arrayOf("\u220f", "&prod;"),
        arrayOf("\u2211", "&sum;"),
        arrayOf("\u2212", "&minus;"),
        arrayOf("\u2217", "&lowast;"),
        arrayOf("\u221a", "&radic;"),
        arrayOf("\u221d", "&prop;"),
        arrayOf("\u221e", "&infin;"),
        arrayOf("\u2220", "&ang;"),
        arrayOf("\u2227", "&and;"),
        arrayOf("\u2228", "&or;"),
        arrayOf("\u2229", "&cap;"),
        arrayOf("\u222a", "&cup;"),
        arrayOf("\u222b", "&int;"),
        arrayOf("\u2234", "&there4;"),
        arrayOf("\u223c", "&sim;"),
        arrayOf("\u2245", "&cong;"),
        arrayOf("\u2248", "&asymp;"),
        arrayOf("\u2260", "&ne;"),
        arrayOf("\u2261", "&equiv;"),
        arrayOf("\u2264", "&le;"),
        arrayOf("\u2265", "&ge;"),
        arrayOf("\u2282", "&sub;"),
        arrayOf("\u2283", "&sup;"),
        arrayOf("\u2284", "&nsub;"),
        arrayOf("\u2286", "&sube;"),
        arrayOf("\u2287", "&supe;"),
        arrayOf("\u2295", "&oplus;"),
        arrayOf("\u2297", "&otimes;"),
        arrayOf("\u22a5", "&perp;"),
        arrayOf("\u22c5", "&sdot;"),
        arrayOf("\u2308", "&lceil;"),
        arrayOf("\u2309", "&rceil;"),
        arrayOf("\u230a", "&lfloor;"),
        arrayOf("\u230b", "&rfloor;"),
        arrayOf("\u2329", "&lang;"),
        arrayOf("\u232a", "&rang;"),
        arrayOf("\u25ca", "&loz;"),
        arrayOf("\u2660", "&spades;"),
        arrayOf("\u2663", "&clubs;"),
        arrayOf("\u2665", "&hearts;"),
        arrayOf("\u2666", "&diams;"),
        arrayOf("\u0152", "&OElig;"),
        arrayOf("\u0153", "&oelig;"),
        arrayOf("\u0160", "&Scaron;"),
        arrayOf("\u0161", "&scaron;"),
        arrayOf("\u0178", "&Yuml;"),
        arrayOf("\u02c6", "&circ;"),
        arrayOf("\u02dc", "&tilde;"),
        arrayOf("\u2002", "&ensp;"),
        arrayOf("\u2003", "&emsp;"),
        arrayOf("\u2009", "&thinsp;"),
        arrayOf("\u200c", "&zwnj;"),
        arrayOf("\u200d", "&zwj;"),
        arrayOf("\u200e", "&lrm;"),
        arrayOf("\u200f", "&rlm;"),
        arrayOf("\u2013", "&ndash;"),
        arrayOf("\u2014", "&mdash;"),
        arrayOf("\u2018", "&lsquo;"),
        arrayOf("\u2019", "&rsquo;"),
        arrayOf("\u201a", "&sbquo;"),
        arrayOf("\u201c", "&ldquo;"),
        arrayOf("\u201d", "&rdquo;"),
        arrayOf("\u201e", "&bdquo;"),
        arrayOf("\u2020", "&dagger;"),
        arrayOf("\u2021", "&Dagger;"),
        arrayOf("\u2030", "&permil;"),
        arrayOf("\u2039", "&lsaquo;"),
        arrayOf("\u203a", "&rsaquo;"),
        arrayOf("\u20ac", "&euro;")
    )
}